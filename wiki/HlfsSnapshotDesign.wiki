#summary HLFS快照设计.
=HLFS snapshot design =                                     

==术语及名词解释==
  * 快照：记录HLFS当前状态，以便将来的某一时刻文件系统可以恢复到该状态；
  * 回滚：恢复HLFS到指定的状态；
  * 回滚模式：回滚操作有两种模式：只读模式，即只能读取指定状态的数据，并不影响文件系统；可写模式，即文件系统恢复到指定的状态，并且能够以追加的方式继续写入log。
  * 版本：用于标识检查点，我们使用的是uint64_t类型的时间值；
  * 快照名：用于标识快照的字符串，由用户指定；
  * 检查点：即内部触发快照，HLFS每写入一个log就进行一次快照，这个快照称为检查点；
  * 快照：即外部触发快照，用户使用我们给提供的接口进行快照，该类快照是不定时的、随机的；
  * 离线：未使用hlfs_init()函数初始化文件系统，即用户未获得ctrl结构体，不能进行读写操作；
  * 在线：已使用hlfs_init()函数初始化文件系统，即用户可以通过ctrl进行读写操作；

==需求及功能说明==
  * 快照时机的选择：
选择快照的时机有两种解决方案，一种以时间作为衡量标准来确定快照时间间隔，即每隔一定的时间进行一次快照。如果采用这种方式，快照间隔时间过长，回滚的精度将会降低，反之，快照的时间间隔过短，系统的开将会很大。另一种是以空间作为衡量标准，即每写入一定地数据长度进行一次快照。出于对HLFS设计特点的考虑，我们采用每写入一次log进行一次快照，当然，为了给用户提供方便，我们结合外部触发控制，即提供给用户进行快照的接口。

  * 快照的类型：
根据上述快照时机的方式，我们将快照分为两种类型：
  # checkpoint：检查点，即每次写入log时保存的快照。这种类型的快照无需重新设计，每个log都是一个天然的检查点，其标记到的数据可以被段清理机制清理。我们只需要设计其回滚操作即可。
  # snapshot：快照，即用户使用接口创建的快照。这种类型的快照为永久性快照，其标记到的数据不能被清理。
  * 快照的内容：
当前活跃段中最后一个log中inode_map_entry、时间戳、以及用户定义的快照名。
  * 快照的存储方式：
HLFS是将HDFS或LOCAL（本地文件系统）的文件用作虚拟磁盘，数据和元数据都是以HDFS或LOCAL文件的形式存在。因而我们将快照存入文件checkpoints.txt。这点请参见HLFS设计。

==API设计==
  * int take_snapshot(HLFS_CTRL `*`ctrl, const char `*`ssname)
给用户提供的在线方式快照接口，用户可以指定快照名。
  # ctrl: 全局控制结构体
  # ssname: 用户指定的快照名
  # return value: 成功返回0，失败返回-1
  * int list_all_snapshot(const char `*`uri)
给用户列出所有已存在的快照名及时间信息。
  # uri: 文件系统的位置 
  # return value: 成功返回0，失败返回-1
  * int rm_snapshot(const char `*`uri, const char `*`ssname)
用户可以通过这个接口来删除指定名字的快照。
  # uri: 文件系统的位置 
  # ssname: 用户指定的快照名
  # return value: 成功返回0，失败返回-1
  * struct inode `*`find_inode_before_time(const char `*`uri, uint64_t time, struct inode `*`inode)
用户可以通过这个接口来获取timestamp之前的inode结构体。
  # uri: 文件系统的位置 
  # time: 用户指定的时间
  # inode: 获得的inode将存放在这里
  # return value: 成功返回inode结构体地址，失败返回NULL
  * struct inode `*`find_inode_by_name(const char `*`uri, struct inode `*`inode, const char `*`ssname)
用户可以通过这个接口来获取指定名字的快照记录的inode结构体。
  # uri: 文件系统的位置 
  # inode: 获得的inode将存放在这里
  # ssname: 用户指定的快照名
  # return value: 成功返回inode结构体地址，失败返回NULL
  * int get_inode_info_by_addr(const char `*`uri, struct inode `*`inode, uint64_t `*`creat_time, uint64_t `*`length)
将指定inode的创建时间和文件长度读入内存。
  # uri: 文件系统的位置 
  # inode: 指定的inode
  # creat_time: 创建时间将存放在这里
  # length: 文件长度将存放在这里
  # return value: 成功返回0，失败返回-1
  * int hlfs_open_by_inode(HLFS_CTRL `*`ctrl, struct inode `*`inode, int flag)
加载指定的inode到ctrl结构体，以flag标识的模式启动回滚。
  # ctrl: 全局控制结构
  # inode: 指定的inode
  # flag: 0 只读模式， 1 可写模式
  # return value: 成功返回0，失败返回-1
   
==API使用指南==

  * 快照： 在线模式调用take_snapshot()函数
  * 获取快照清单：离线模式调用list_all_snapshot()
  * 删除指定名字的快照：离线模式调用rm_snapshot()
  * 回滚到检查点：调用find_inode_before_time获得inode结构体，然后调用get_inode_info_by_addr()获取inode信息，根据该信息判断是否满足用户要求，则启动回滚——调用init_hlfs()获得全局控制结构，并以只读或者是可写模式调用hlfs_open_by_inode()
  * 回滚到快照：调用find_inode_by_name获得inode结构体，启动回滚——调用init_hlfs()获得全局控制结构，并以只读或者是可写模式调用hlfs_open_by_inode()
#summary 快照区间下段回收设计

=  快照区间下段回收设计 =

Log Structure的存储系统都跑不了旧数据回收这个环节。回收数据的算法好坏不但影响到磁盘占用率，更会影响到和读写访问性能。根据个人经验来看，
旧数据回收也是容易出bug的地方（而且这里的bug很可能破坏数据），因此我们特别强调段回收算法和策略，单独作为一个子模块加以设计和实施。

= 算法概述 =
我们知道，HLFS的inode结构会记录（通过各级索引）逻辑块和其物理存储地址的映射关系，也就是通过逻辑块号能找到其存储块位置。在这个前提下，我们要判断一个log中的存储块(data block)是否是旧数据，其实只需要根据该存储块是否能被给定inode索引到来判断——能索引到说明是活跃块（alive block),不能被索引到则是旧数据块（old block)。如果一个段中的所有数据块都是旧数据块，那么这个段文件则可被直接回收（直接删除段文件即可——我们称为简单回收）。 

= 强制回收段文件 =
简单回收要求一个段被回收要求绝对不存在活跃块。但是很有可能一个段中只有少量活跃块，这种情况下不回收其实在是种浪费，所以我们想办法搬迁这写少量的活跃块——将其以新数据块形式写入新log,从而“帮助”该段达到无活跃块状态，进而能被回收。 我们称其为 move & remove 策略。<br>

= 快照条件下段回收 =
在快照情况下回收段文件：快照可以说是段回收的拦路虎，因为其将需要固化历史版本，使得段回收的范围不再是全局性，而是只能按照快照区间进行——和无快照环境相比，参照的inode结构不再是次新inode，而是上游快照(up snapshot）所在的inode。<br>
另外，强制回收段的方式在快照条件下很难适用，因为一旦搬迁某个快照区间的某个block，则意味着破坏了后续inode的寻址（无法再找到搬迁后的块）。到目前为止我们还没找到一个高效解决该问题的方法，所以快照间的段回收目前不进行强制回收动作。
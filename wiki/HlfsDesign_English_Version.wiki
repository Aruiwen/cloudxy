#summary HLFS Frame Design
=Hadoop DFS log structure filesystem design=
                                            -- Written by Kang Hua, Translated by Harry Wei, etc. 

==Background introduction==
   HLFS(Hadoop DFS Log FileSystem) is used to provide virtual disk for elastic cloud platform (just like EBS for amazon) and backend storage service. It needs to satisfy some characters including usability, high-performance, random reading and writing, fast fault recovery, data snapshots, rollback and so on.

==Realization description==
     Hadoop DFS can be regarded as a reliable, extensible 'disk' at any time. However, it cannot be writtern randomly but append sequentially. So we cannot take it as our mirror storage system directly. Thus we should realize randomly W/R operations by appending logs with the help of thoughts about 'log structure filesystem'. 

==Characteristics description==
 * User mode file system ------- different to standard kernel mode posix interface file system. HLFS is realized at user mode and implanted into client-side as lib. It is unnecessary to realize posix interface standard, realizing pread/pwrite is ok.
 * Supporting random reading and writing ------- file supports random reading and writing (according to offset  location ).
 * Supporting large files storage ------- single file needs to support over T data storage (the file means the disk of virtual machine).
 * Only supporting single file ------ every virtual disk corresponds an HLFS case, so the easiest design only supports one file (corresponding a disk in a virtual machine).
 * Client  - orient ------ virtual machine disk can only be attached to one virtual machine mirror, so we need to keep the data same of virtual machine client.
 * Supporting snapshot and rollback ------ we can do snapshot and rollback on a file (to host service virtual machine, snapshot and rollback is the most effective way to protect data from pollution and damage).
 * Supporting multidata and multicopy  -------  more than one storage can ensure data safety and  nearly visit (hadoop helps us realize this).
 * Cluster system can do dynamic expansion  ------- storage nodes (PC servers ) can do dynamic expansion without affecting  normal service of cluster (hadoop helps us realize this). 
 * Cluster system can do fault switch limpidly  -------- fault of storage nodes does not affect service, and it is limpid to clients (hadoop helps us realize this).


==Design summary=
#summary 性能优化.

= 调优介绍 =

先大刀阔斧完完成从无到有的功能，初步跑通，增强自信。那下一步就该是抽丝剥茧搬的调优过程了。
调优的几个断言：
　* 调优过程将是无止尽的
  * 任何优化都是有代价的

HLFS项目存在大量可调整的理由和办法，可谓仁者见仁智者见智。我们将从从收益角度和实现代价考虑，逐步开展。
因为很多优化办法具备普遍意义，所以我们费一些笔墨描述之。
 

= 调优点 =

== indirect block read cache ==
我们知道，每次访问data block，只要需要从磁盘中载入或者写入，就必须首先访问indirect block（如果db在cache则不需要再从磁盘载入），显然这些indirect block访问相当频繁，如果访问ib时，每每都操作磁盘，那对性能无疑是个重大损失。所以我们尽可能希望最近访问的ib能被缓存起来，从而避免磁盘访问。
所以，我们实现ICACHE缓存（indirect block cache），和DCATCH(data block cache)写缓存相比，ICACHE最大特点是它属于读缓存，并不需要向DCACHE那样WRITEBACK ——　因为ib会随db一起在dump_log时被写到后台。 ICACHE实现和DACHE有所相似，不过没有后台刷新线程。
另外值得一提的是，iblock当前编号规则按照简单的遍历顺序而给定，且和dblock相互独立。这是当前简单实现，后期可以采用基树替代简单hash；采用iblock dblock统一编号带台当前独立编号。

== segment file handler reuse ==
我们知道，每次读写一个段文件都要经历打开文件-访问文件-关闭文件几个过程，这种频繁的打开和关闭无疑是性能提升的重要障碍，所以我们要想方设法降低打开文件和关闭文件操作。
比较理想办法应该是——
#.预先打开段文件（比如每次需要打开或创建段文件时，一次行打开或创建后续n个),从而避免频繁打开段文件；
#.延迟关闭段文件，或者惰性关闭其（比如，每次访问段内容后并非立刻关闭段文件句柄，而是延后关闭）
我们本次优化，先简单处理——实施延迟关闭方式减少每次block访问都打开关闭文件。

== 锁优化 == 
目前系统最大锁争用在于：


--待续

















